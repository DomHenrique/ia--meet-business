import streamlit as st
import os
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langchain_community.utilities import SerpAPIWrapper
from langchain.schema import HumanMessage
from langgraph.graph import StateGraph, END
from langsmith import trace
import logging
from typing import Dict, Any, Optional, TypedDict
from datetime import datetime

# ==================================================================================================
# 1. CONFIGURA√á√ÉO INICIAL (Logging e Vari√°veis de Ambiente)
# ==================================================================================================

# Configura o logging para exibir informa√ß√µes no console
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@st.cache_resource
def load_environment():
    """
    Carrega as vari√°veis de ambiente de um arquivo .env.
    √â essencial para manter as chaves de API seguras e fora do c√≥digo.
    """
    load_dotenv()
    return {
        'openai_api_key': os.getenv("OPENAI_API_KEY"),
        'serpapi_api_key': os.getenv("SERPAPI_API_KEY"),
        'langsmith_api_key': os.getenv("LANGSMITH_API_KEY")
    }

# ==================================================================================================
# 2. CONFIGURA√á√ÉO DAS FERRAMENTAS (LLM e Busca)
# ==================================================================================================

@st.cache_resource
def setup_tools(env_vars: Dict[str, str]):
    """
    Inicializa o Large Language Model (LLM) e a ferramenta de busca.
    O LLM √© o c√©rebro da opera√ß√£o, e a ferramenta de busca coleta informa√ß√µes da web.
    """
    # Configura o LLM (GPT-4o-mini da OpenAI)
    llm = ChatOpenAI(
        model="gpt-4o-mini",
        temperature=0.7,
        api_key=env_vars.get('openai_api_key'),
        max_tokens=2000
    )

    # Configura a ferramenta de busca (SerpAPI)
    search_tool = SerpAPIWrapper(serpapi_api_key=env_vars.get('serpapi_api_key'))
    
    return llm, search_tool

# ==================================================================================================
# 3. DEFINI√á√ÉO DO WORKFLOW (Estado e N√≥s)
# ==================================================================================================

class MeetingState(TypedDict):
    """
    Define a estrutura de dados (estado) que flui atrav√©s do workflow.
    Cada campo armazena uma parte da informa√ß√£o gerada em cada etapa.
    """
    company_name: str
    meeting_objective: str
    attendees: str
    duration: int
    focus_areas: str
    context_analysis: str
    industry_analysis: str
    strategy: str
    executive_brief: str
    timestamp: str

def validate_inputs(company: str, objective: str, attendees: str) -> Optional[str]:
    """Valida os inputs do usu√°rio."""
    if not company.strip():
        return "Nome da empresa √© obrigat√≥rio"
    if not objective.strip():
        return "Objetivo da reuni√£o √© obrigat√≥rio"
    if not attendees.strip():
        return "Lista de participantes √© obrigat√≥ria"
    if len(company) < 2:
        return "Nome da empresa deve ter pelo menos 2 caracteres"
    return None

# --- Fun√ß√µes dos N√≥s do Grafo ---

def context_analysis_node(state: MeetingState) -> dict:
    """
    N√≥ 1: Analisa o contexto da empresa e da reuni√£o.
    Busca not√≠cias, produtos e servi√ßos da empresa para criar um resumo inicial.
    """
    logger.info(f"Iniciando an√°lise de contexto para: {state['company_name']}")
    try:
        query = f'"{state["company_name"]}" not√≠cias recentes, produtos e servi√ßos 2024 2025'
        search_results = search_tool.run(query)
        
        prompt = f"""
        Voc√™ √© um analista de neg√≥cios s√™nior. Sua tarefa √© analisar o contexto para uma reuni√£o com a empresa '{state['company_name']}'.

        **DADOS DA REUNI√ÉO:**
        - Objetivo: {state['meeting_objective']}
        - Participantes: {state['attendees']}
        - Dura√ß√£o: {state['duration']} minutos

        **RESULTADOS DA PESQUISA WEB:**
        {search_results[:3000]}

        **INSTRU√á√ÉO:**
        Com base nos dados, gere uma an√°lise de contexto concisa em markdown, incluindo:
        1.  **Perfil da Empresa:** Setor, porte e posicionamento de mercado.
        2.  **Not√≠cias Relevantes:** Principais acontecimentos recentes.
        3.  **Produtos/Servi√ßos Chave:** O que a empresa oferece.
        4.  **Relev√¢ncia para a Reuni√£o:** Como este contexto impacta o objetivo da reuni√£o.
        """
        
        response = llm([HumanMessage(content=prompt)])
        logger.info("An√°lise de contexto conclu√≠da.")
        return {"context_analysis": response.content}
        
    except Exception as e:
        logger.error(f"Erro na an√°lise de contexto: {e}")
        return {"context_analysis": f"‚ö†Ô∏è Falha ao analisar o contexto da empresa: {e}"}

def industry_analysis_node(state: MeetingState) -> dict:
    """
    N√≥ 2: Analisa a ind√∫stria e o mercado da empresa.
    Busca por tend√™ncias, competidores e an√°lises de mercado.
    """
    logger.info("Iniciando an√°lise de ind√∫stria.")
    try:
        industry_query = f"An√°lise de mercado e tend√™ncias para o setor da empresa '{state['company_name']}'"
        industry_results = search_tool.run(industry_query)
        
        prompt = f"""
        Como analista de mercado, sua tarefa √© analisar a ind√∫stria da empresa '{state['company_name']}'.

        **CONTEXTO DA REUNI√ÉO:**
        - Objetivo: {state['meeting_objective']}

        **DADOS DE MERCADO (PESQUISA WEB):**
        {industry_results[:3000]}

        **INSTRU√á√ÉO:**
        Forne√ßa uma an√°lise da ind√∫stria em markdown, focando em:
        1.  **Panorama do Setor:** Tamanho, crescimento e caracter√≠sticas.
        2.  **Tend√™ncias Atuais:** Tecnol√≥gicas, de consumo ou regulat√≥rias.
        3.  **Cen√°rio Competitivo:** Principais concorrentes e seus diferenciais.
        4.  **Oportunidades e Amea√ßas (SWOT):** Fatores que podem impactar a reuni√£o.
        """
        
        response = llm([HumanMessage(content=prompt)])
        logger.info("An√°lise de ind√∫stria conclu√≠da.")
        return {"industry_analysis": response.content}
        
    except Exception as e:
        logger.error(f"Erro na an√°lise de ind√∫stria: {e}")
        return {"industry_analysis": f"‚ö†Ô∏è Falha ao analisar a ind√∫stria: {e}"}

def strategy_development_node(state: MeetingState) -> dict:
    """
    N√≥ 3: Desenvolve a estrat√©gia e a agenda da reuni√£o.
    Usa as an√°lises anteriores para criar um plano de a√ß√£o.
    """
    logger.info("Desenvolvendo estrat√©gia da reuni√£o.")
    try:
        prompt = f"""
        Voc√™ √© um consultor estrat√©gico. Sua miss√£o √© criar uma estrat√©gia para a reuni√£o com base nas an√°lises.

        **AN√ÅLISE DE CONTEXTO:**
        {state.get('context_analysis', 'N√£o dispon√≠vel')}

        **AN√ÅLISE DE IND√öSTRIA:**
        {state.get('industry_analysis', 'N√£o dispon√≠vel')}

        **PAR√ÇMETROS DA REUNI√ÉO:**
        - Dura√ß√£o: {state['duration']} minutos
        - Objetivo: {state['meeting_objective']}
        - Participantes: {state['attendees']}

        **INSTRU√á√ÉO:**
        Desenvolva uma estrat√©gia de reuni√£o em markdown, contendo:
        1.  **Agenda Detalhada:** T√≥picos com tempo alocado (total: {state['duration']} min).
        2.  **Estrat√©gia de Abordagem:** Mensagens-chave a serem comunicadas e perguntas a serem feitas.
        3.  **Plano de A√ß√£o e Pr√≥ximos Passos:** O que fazer ap√≥s a reuni√£o.
        """
        
        response = llm([HumanMessage(content=prompt)])
        logger.info("Estrat√©gia da reuni√£o desenvolvida.")
        return {"strategy": response.content}
        
    except Exception as e:
        logger.error(f"Erro no desenvolvimento da estrat√©gia: {e}")
        return {"strategy": f"‚ö†Ô∏è Falha ao desenvolver a estrat√©gia: {e}"}

def executive_brief_node(state: MeetingState) -> dict:
    """
    N√≥ 4: Cria o briefing executivo final.
    Consolida todas as informa√ß√µes em um documento final e acion√°vel.
    """
    logger.info("Criando o briefing executivo.")
    try:
        prompt = f"""
        Como assistente executivo, compile um briefing final para a reuni√£o com '{state['company_name']}'.

        **DADOS COMPILADOS:**
        - Contexto: {state.get('context_analysis', 'N√£o dispon√≠vel')}
        - Ind√∫stria: {state.get('industry_analysis', 'N√£o dispon√≠vel')}
        - Estrat√©gia: {state.get('strategy', 'N√£o dispon√≠vel')}

        **INSTRU√á√ÉO:**
        Crie um briefing executivo completo e bem estruturado em markdown. O documento deve ser claro, conciso e visualmente organizado. Use emojis para destacar se√ß√µes.

        # üìã BRIEFING EXECUTIVO: Reuni√£o com {state['company_name']}

        ## üéØ 1. RESUMO DA REUNI√ÉO
        - **Objetivo:** {state['meeting_objective']}
        - **Participantes:** {state['attendees']}
        - **Dura√ß√£o:** {state['duration']} minutos

        ## üè¢ 2. CONTEXTO DA EMPRESA
        {state.get('context_analysis', 'An√°lise n√£o dispon√≠vel.')}

        ## üìä 3. AN√ÅLISE DE MERCADO
        {state.get('industry_analysis', 'An√°lise n√£o dispon√≠vel.')}

        ## üöÄ 4. ESTRAT√âGIA E AGENDA
        {state.get('strategy', 'Estrat√©gia n√£o dispon√≠vel.')}
        """
        
        response = llm([HumanMessage(content=prompt)])
        logger.info("Briefing executivo finalizado.")
        return {"executive_brief": response.content}
        
    except Exception as e:
        logger.error(f"Erro na cria√ß√£o do briefing: {e}")
        return {"executive_brief": f"‚ö†Ô∏è Falha ao criar o briefing: {e}"}

# --- Constru√ß√£o do Grafo ---

@st.cache_resource
def build_workflow():
    """
    Constr√≥i o grafo de execu√ß√£o (workflow) usando LangGraph.
    Define a sequ√™ncia em que os n√≥s (fun√ß√µes) ser√£o executados.
    """
    workflow = StateGraph(MeetingState)
    
    # Adiciona os n√≥s ao grafo
    workflow.add_node("context", context_analysis_node)
    workflow.add_node("industry", industry_analysis_node)
    workflow.add_node("strategy", strategy_development_node)
    workflow.add_node("brief", executive_brief_node)
    
    # Define as arestas (a ordem de execu√ß√£o)
    workflow.set_entry_point("context")
    workflow.add_edge("context", "industry")
    workflow.add_edge("industry", "strategy")
    workflow.add_edge("strategy", "brief")
    workflow.add_edge("brief", END)
    
    # Compila o grafo em um objeto execut√°vel
    return workflow.compile()

# ==================================================================================================
# 4. INTERFACE DO USU√ÅRIO (Streamlit)
# ==================================================================================================

def setup_sidebar(env_vars: Dict[str, str]):
    """Configura a barra lateral com instru√ß√µes e status do sistema."""
    with st.sidebar:
        st.markdown("## üìö Como Usar")
        st.markdown('''
        1.  **Configure as APIs:** Crie um arquivo `.env` na raiz do projeto com suas chaves de API:
            ```
            OPENAI_API_KEY="sua_chave_openai"
            SERPAPI_API_KEY="sua_chave_serpapi"
            LANGSMITH_API_KEY="sua_chave_langsmith" # Opcional
            ```
        2.  **Preencha os Campos:** Insira as informa√ß√µes da reuni√£o nos campos ao lado.
        3.  **Execute:** Clique em "Preparar Reuni√£o" para iniciar o processo.
        ''')
        
        st.markdown("---")
        st.markdown("## ‚öôÔ∏è Status do Sistema")
        
        if env_vars.get('openai_api_key'):
            st.success("‚úÖ OpenAI API conectada")
        else:
            st.error("‚ùå OpenAI API n√£o configurada")
            
        if env_vars.get('serpapi_api_key'):
            st.success("‚úÖ SerpAPI conectada")
        else:
            st.error("‚ùå SerpAPI n√£o configurada")
            
        if env_vars.get('langsmith_api_key'):
            st.success("‚úÖ LangSmith conectado")
        else:
            st.info("‚ÑπÔ∏è LangSmith n√£o configurado")
            
        st.markdown("---")
        st.caption("ü§ñ Powered by LangChain & LangGraph")

# ==================================================================================================
# 5. EXECU√á√ÉO PRINCIPAL
# ==================================================================================================

if __name__ == "__main__":
    # Carrega configs e ferramentas
    env_vars = load_environment()
    llm, search_tool = setup_tools(env_vars)
    
    # --- Interface do Usu√°rio ---
    st.set_page_config(page_title="AI Meeting Agent üìù", layout="wide", initial_sidebar_state="expanded")
    st.title("ü§ñ Agente IA para Prepara√ß√£o de Reuni√µes")
    
    setup_sidebar(env_vars)

    with st.container():
        st.subheader("üìù Informa√ß√µes da Reuni√£o")
        col1, col2 = st.columns([2, 1])
        with col1:
            company_name = st.text_input("üè¢ Nome da Empresa:", placeholder="Ex: Microsoft, Google...")
            meeting_objective = st.text_input("üéØ Objetivo da Reuni√£o:", placeholder="Ex: Apresentar proposta de parceria...")
            attendees = st.text_area("üë• Participantes e Fun√ß√µes:", placeholder="""Ex:
‚Ä¢ Jo√£o Silva - CEO
‚Ä¢ Maria Santos - Diretora de Vendas""", height=100)
        
        with col2:
            meeting_duration = st.selectbox("‚è∞ Dura√ß√£o (minutos):", options=[30, 45, 60, 90, 120], index=2)
            focus_areas = st.text_input("üîç √Åreas de Foco:", placeholder="Ex: Tecnologia, Pre√ßos, Prazos...")

    # --- L√≥gica de Execu√ß√£o ---
    st.markdown("---")
    
    # Verifica se as ferramentas essenciais est√£o prontas
    if not env_vars.get('openai_api_key') or not env_vars.get('serpapi_api_key'):
        st.error("‚ùå Configure as chaves de API da OpenAI e SerpAPI no arquivo .env para continuar.")
        st.stop()

    if st.button("üöÄ Preparar Reuni√£o", type="primary", use_container_width=True):
        # Valida√ß√£o dos inputs
        validation_error = validate_inputs(company_name, meeting_objective, attendees)
        if validation_error:
            st.warning(f"‚ö†Ô∏è {validation_error}")
        else:
            # Prepara o estado inicial para o workflow
            initial_state = {
                'company_name': company_name,
                'meeting_objective': meeting_objective,
                'attendees': attendees,
                'duration': meeting_duration,
                'focus_areas': focus_areas or "Nenhuma √°rea espec√≠fica definida",
                'context_analysis': '',
                'industry_analysis': '',
                'strategy': '',
                'executive_brief': '',
                'timestamp': datetime.now().isoformat()
            }
            
            # Compila e executa o workflow
            app = build_workflow()
            
            progress_bar = st.progress(0, text="Iniciando an√°lise...")
            
            try:
                # Executa o grafo com rastreamento (se LangSmith estiver configurado)
                if env_vars.get('langsmith_api_key'):
                    with trace("meeting_preparation", inputs=initial_state):
                        result = app.invoke(initial_state)
                else:
                    result = app.invoke(initial_state)
                
                progress_bar.progress(100, text="Briefing finalizado!")

                # Exibe o resultado final
                st.success("‚úÖ **Briefing preparado com sucesso!**")
                st.markdown("---")
                st.markdown(result["executive_brief"])
                
                # Bot√£o de download
                st.download_button(
                    label="üì• Download do Briefing (MD)",
                    data=result["executive_brief"],
                    file_name=f"briefing_{company_name.lower().replace(' ', '_')}.md",
                    mime="text/markdown"
                )
                
            except Exception as e:
                st.error(f"‚ùå **Ocorreu um erro durante a prepara√ß√£o:** {e}")
                logger.error(f"Erro na execu√ß√£o do workflow: {e}")
            finally:
                if 'progress_bar' in locals():
                    progress_bar.empty()